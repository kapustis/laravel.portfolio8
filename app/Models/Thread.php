<?php

namespace App\Models;

use App\Events\ThreadReceivedNewReply;
use App\Filters\ThreadFilter;
use App\RecordsActivity;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;

/**
 * @property mixed title
 * @property mixed $replies
 * @property mixed $creator
 * @property mixed $channel
 * @property int $reply_count
 * @property mixed user_id
 * @property mixed subscriptions
 * @property mixed updated_at
 * @property mixed slug
 * @property mixed id
 * @property mixed locked
 * @method static create(array $array)
 * @method static latest()
 */
class Thread extends Model
{
    use HasFactory, RecordsActivity;

    /**
     * Don't auto-apply mass assignment protection.
     * Снятие авто-защиты от массового присвоения.
     * @var array
     **/
    protected $guarded = [];

    /**
     * The relationships to always eager-load.
     *  Отношения всегда с быстрой загрузкой
     * @var array
     **/
    protected $with = ['creator', 'channel'];

    /**
     * The accessors to append to the model's array form.
     * Средства доступа, чтобы добавить к форме массива модели
     * @var array
     **/
    protected $appends = ['isSubscribedTo'];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'locked' => 'boolean'
    ];

    /**
     * Boot the model.
     **/
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($thread) {
            $thread->replies->each->delete();
        });
        static::created(function ($thread) {
            $thread->update(['slug' => $thread->title]);
        });
    }

    /**
     * Get a string path for the thread.
     *
     * @return string
     **/
    public function path()
    {
        return "/blog/{$this->channel->slug}/{$this->slug}";
    }

    /**
     * A thread is assigned a channel.
     * Потоку назначается канал
     * @return BelongsTo
     */
    public function channel()
    {
        return $this->belongsTo(Channel::class);
    }

    /**
     * создатель темы на сайте.
     *
     * @return BelongsTo
     **/
    public function creator()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * A thread may have many replies
     * Тема может иметь много ответов
     * @return HasMany
     */
    public function replies()
    {
        return $this->hasMany(Reply::class);
    }


    /**
     * Add a reply to the thread.
     * Добавить ответ в тему
     * @param array $reply
     * @return Model
     */
    public function addReply(array $reply)
    {
        $reply = $this->replies()->create($reply);
        event(new ThreadReceivedNewReply($reply));
        return $reply;

    }
    /**
     * Mark the given reply as the best answer.
     *
     * @param Reply $reply
     */
    public function markBestReply(Reply $reply)
    {
        $this->update(['best_reply_id' => $reply->id]);
    }

    /**
     * Apply all relevant thread filters.
     * Применить все соответствующие фильтры.
     * @param Builder $query
     * @param ThreadFilter $filters ThreadFilter
     * @return Builder
     **/
    public function scopeFilter(Builder $query, ThreadFilter $filters)
    {
        return $filters->apply($query);
    }

    /**
     *
     * @param int|null $userId
     * @return Thread
     **/
    public function subscribe($userId = null)
    {
        $this->subscriptions()->create([
            'user_id' => $userId ?: auth()->id()
        ]);
        $this->increment('bookmark');

        return $this;
    }

    /**
     * Unsubscribe a user from the current thread.
     * Отписать пользователя от текущего потока
     * @param int|null $userId
     **/
    public function unsubscribe($userId = null)
    {
        $this->subscriptions()
            ->where('user_id', $userId ?: auth()->id())
            ->delete();
        $this->decrement('bookmark');
    }

    /**
     * A thread can have many  .
     * У потока может быть много подписок.
     * @return HasMany
     **/
    public function subscriptions()
    {
        return $this->hasMany(ThreadSubscription::class);
    }

    /**
     * Determine if the current user is subscribed to the thread.
     * Подписан ли текущий пользователь на поток.
     * @return boolean
     **/
    public function getIsSubscribedToAttribute()
    {
        return $this->subscriptions()
            ->where('user_id', auth()->id())
            ->exists();
    }

    /**
     * Determine if the thread has been updated since the user last read it.
     *
     * @param User $user
     * @return bool
     * @throws Exception
     **/
    public function hasUpdatesFor(User $user)
    {
        $key = $user->visitedThreadCacheKey($this);
        return $this->updated_at > cache($key);
    }

    public function visits()
    {
        return new Visits($this);
    }

    /**
     * Get the route key name.
     *
     * @return string
     */
    public function getRouteKeyName(){
        return 'slug';
    }

    /**
     * Set the proper slug attribute.
     *
     * @param string $value
     */
    public function setSlugAttribute(string $value)
    {
        if (static::whereSlug($slug = Str::slug($value))->exists()) {
            $slug = "{$slug}-{$this->id}";
        }
        $this->attributes['slug'] = $slug;
    }

    /**
     * Lock the thread.
     * Зафиксируйть тему.
     */
    public function lock()
    {
        $this->update(['locked' => true]);
    }
}
