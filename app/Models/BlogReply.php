<?php

namespace App\Models;

use App\Favoritable;
use App\RecordsActivity;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

/**
 * @property mixed $favorites
 * @property mixed $owner
 * @property mixed id
 * @property mixed thread
 * @property mixed user_id
 * @property mixed created_at
 * @property mixed body
 */
class BlogReply extends Model
{
    use HasFactory, Favoritable, RecordsActivity;

    /**
     * Don't auto-apply mass assignment protection.
     * Снятие авто-защиты от массового присвоения.
     * @var array
     */
    protected $guarded = [];

    /**
     * The relations to eager load on every query.
     * Отношения к нетерпеливой нагрузке на каждый запрос.
     * @var array
     */
    protected $with = ['owner', 'favorites'];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = ['favoritesCount', 'isFavorited', 'isBest','isAuthorThreads'];

    /**
     * Boot the reply instance.
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($reply) {
            $reply->thread->increment('replies_count');
        });
        static::deleted(function ($reply) {
//            if($reply->isBest()){
//                $reply->thread->update(['best_reply_id' => null]);
//            }
            $reply->thread->decrement('replies_count');
        });
    }

    /**
     * A reply has an owner.
     * Владелец ответа(коментария)
     * @return BelongsTo
     */
    public function owner()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * A reply belongs to a thread.
     * В ответа есть тема(нить)
     * @return BelongsTo
     */
    public function thread()
    {
        return $this->belongsTo(BlogThread::class);
    }

    /**
     * Fetch all mentioned users within the reply's body.
     * Поиск всех упомянутых пользователей в теле ответа
     * @return array
     */
    public function mentionedUsers()
    {
        preg_match_all('/@([\w\-]+)/', $this->body, $matches);
        return $matches[1];
    }

    /**
     * Determine if the reply was just published a moment ago.
     * Определить, был ли ответ только что опубликован минуту назад.
     * @return bool
     */
    public function wasJustPublished()
    {
        return $this->created_at->gt(Carbon::now()->subSeconds(30));
    }

    /**
     * Determine the path to the reply.
     * Определить путь к ответу
     * @return string
     */
    public function path()
    {
        return $this->thread->path() . "#reply-{$this->id}";
    }
    /**
     * Set the body attribute.
     *
     * @param $body
     */
    public function setBodyAttribute($body)
    {
        $this->attributes['body'] = preg_replace('/@([\w\-]+)/', '<a href="/profiles/$1">$0</a>', $body);
    }

    /**
     * Determine if the current reply is marked as the best.
     * Определить, отмечен ли текущий ответ как лучший
     * @return bool
     */
    public function isBest()
    {
        return $this->thread->best_reply_id == $this->id;
    }
    /**
     * Determine if the current user  is the author  the thread
     * Определить, является ли текущий пользователь автором потока
     * @return bool
     */
    public function isAuthorThreads()
    {
        return $this->thread->user_id == $this->user_id;
    }

    /**
     * Determine if the current reply is marked as the best.
     * Определить, отмечен ли текущий ответ как лучший
     * @return bool
     */
    public function getIsBestAttribute()
    {
        return $this->isBest();
    }

    public function getIsAuthorThreadsAttribute()
    {
        return $this->isAuthorThreads();
    }

}
